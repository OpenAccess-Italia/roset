# Generated from Junos.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,436,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,
        1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
        1,17,5,17,243,8,17,10,17,12,17,246,9,17,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,262,8,18,10,18,
        12,18,265,9,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,275,
        8,18,10,18,12,18,278,9,18,3,18,280,8,18,1,19,1,19,1,19,1,19,1,19,
        1,19,3,19,288,8,19,1,19,1,19,1,19,1,19,1,20,3,20,295,8,20,1,20,1,
        20,1,20,5,20,300,8,20,10,20,12,20,303,9,20,1,21,1,21,1,21,1,22,1,
        22,1,22,1,22,1,23,1,23,5,23,314,8,23,10,23,12,23,317,9,23,1,23,1,
        23,1,24,4,24,322,8,24,11,24,12,24,323,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,26,1,26,1,26,5,26,337,8,26,10,26,12,26,340,9,26,1,
        26,3,26,343,8,26,1,27,1,27,1,27,5,27,348,8,27,10,27,12,27,351,9,
        27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,359,8,27,1,27,1,27,5,27,363,
        8,27,10,27,12,27,366,9,27,1,27,1,27,3,27,370,8,27,1,28,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,3,30,385,8,30,
        1,31,1,31,3,31,389,8,31,1,31,3,31,392,8,31,1,31,3,31,395,8,31,1,
        32,1,32,1,33,1,33,5,33,401,8,33,10,33,12,33,404,9,33,1,33,3,33,407,
        8,33,1,33,1,33,1,33,1,33,1,34,4,34,414,8,34,11,34,12,34,415,1,34,
        1,34,1,35,1,35,1,35,1,35,1,35,1,36,3,36,426,8,36,1,36,1,36,1,37,
        1,37,5,37,432,8,37,10,37,12,37,435,9,37,2,315,402,0,38,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,1,0,5,5,0,42,42,45,57,65,90,95,95,97,122,1,0,48,57,3,0,48,
        57,65,70,97,102,2,0,65,90,97,122,5,0,45,45,48,57,65,90,95,95,97,
        122,461,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
        0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
        0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
        0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
        0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
        0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
        0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,81,1,0,
        0,0,5,92,1,0,0,0,7,126,1,0,0,0,9,137,1,0,0,0,11,145,1,0,0,0,13,153,
        1,0,0,0,15,159,1,0,0,0,17,166,1,0,0,0,19,171,1,0,0,0,21,177,1,0,
        0,0,23,185,1,0,0,0,25,205,1,0,0,0,27,219,1,0,0,0,29,228,1,0,0,0,
        31,236,1,0,0,0,33,238,1,0,0,0,35,240,1,0,0,0,37,279,1,0,0,0,39,287,
        1,0,0,0,41,294,1,0,0,0,43,304,1,0,0,0,45,307,1,0,0,0,47,311,1,0,
        0,0,49,321,1,0,0,0,51,325,1,0,0,0,53,342,1,0,0,0,55,369,1,0,0,0,
        57,371,1,0,0,0,59,375,1,0,0,0,61,384,1,0,0,0,63,386,1,0,0,0,65,396,
        1,0,0,0,67,398,1,0,0,0,69,413,1,0,0,0,71,419,1,0,0,0,73,425,1,0,
        0,0,75,429,1,0,0,0,77,78,5,115,0,0,78,79,5,101,0,0,79,80,5,116,0,
        0,80,2,1,0,0,0,81,82,5,100,0,0,82,83,5,101,0,0,83,84,5,97,0,0,84,
        85,5,99,0,0,85,86,5,116,0,0,86,87,5,105,0,0,87,88,5,118,0,0,88,89,
        5,97,0,0,89,90,5,116,0,0,90,91,5,101,0,0,91,4,1,0,0,0,92,93,5,114,
        0,0,93,94,5,111,0,0,94,95,5,117,0,0,95,96,5,116,0,0,96,97,5,105,
        0,0,97,98,5,110,0,0,98,99,5,103,0,0,99,100,5,45,0,0,100,101,5,111,
        0,0,101,102,5,112,0,0,102,103,5,116,0,0,103,104,5,105,0,0,104,105,
        5,111,0,0,105,106,5,110,0,0,106,107,5,115,0,0,107,108,5,32,0,0,108,
        109,5,97,0,0,109,110,5,117,0,0,110,111,5,116,0,0,111,112,5,111,0,
        0,112,113,5,110,0,0,113,114,5,111,0,0,114,115,5,109,0,0,115,116,
        5,111,0,0,116,117,5,117,0,0,117,118,5,115,0,0,118,119,5,45,0,0,119,
        120,5,115,0,0,120,121,5,121,0,0,121,122,5,115,0,0,122,123,5,116,
        0,0,123,124,5,101,0,0,124,125,5,109,0,0,125,6,1,0,0,0,126,127,5,
        105,0,0,127,128,5,110,0,0,128,129,5,116,0,0,129,130,5,101,0,0,130,
        131,5,114,0,0,131,132,5,102,0,0,132,133,5,97,0,0,133,134,5,99,0,
        0,134,135,5,101,0,0,135,136,5,115,0,0,136,8,1,0,0,0,137,138,5,97,
        0,0,138,139,5,100,0,0,139,140,5,100,0,0,140,141,5,114,0,0,141,142,
        5,101,0,0,142,143,5,115,0,0,143,144,5,115,0,0,144,10,1,0,0,0,145,
        146,5,118,0,0,146,147,5,108,0,0,147,148,5,97,0,0,148,149,5,110,0,
        0,149,150,5,45,0,0,150,151,5,105,0,0,151,152,5,100,0,0,152,12,1,
        0,0,0,153,154,5,117,0,0,154,155,5,110,0,0,155,156,5,105,0,0,156,
        157,5,116,0,0,157,158,5,32,0,0,158,14,1,0,0,0,159,160,5,102,0,0,
        160,161,5,97,0,0,161,162,5,109,0,0,162,163,5,105,0,0,163,164,5,108,
        0,0,164,165,5,121,0,0,165,16,1,0,0,0,166,167,5,105,0,0,167,168,5,
        110,0,0,168,169,5,101,0,0,169,170,5,116,0,0,170,18,1,0,0,0,171,172,
        5,105,0,0,172,173,5,110,0,0,173,174,5,101,0,0,174,175,5,116,0,0,
        175,176,5,54,0,0,176,20,1,0,0,0,177,178,5,118,0,0,178,179,5,101,
        0,0,179,180,5,114,0,0,180,181,5,115,0,0,181,182,5,105,0,0,182,183,
        5,111,0,0,183,184,5,110,0,0,184,22,1,0,0,0,185,186,5,112,0,0,186,
        187,5,114,0,0,187,188,5,111,0,0,188,189,5,116,0,0,189,190,5,111,
        0,0,190,191,5,99,0,0,191,192,5,111,0,0,192,193,5,108,0,0,193,194,
        5,115,0,0,194,195,5,32,0,0,195,196,5,98,0,0,196,197,5,103,0,0,197,
        198,5,112,0,0,198,199,5,32,0,0,199,200,5,103,0,0,200,201,5,114,0,
        0,201,202,5,111,0,0,202,203,5,117,0,0,203,204,5,112,0,0,204,24,1,
        0,0,0,205,206,5,108,0,0,206,207,5,111,0,0,207,208,5,99,0,0,208,209,
        5,97,0,0,209,210,5,108,0,0,210,211,5,45,0,0,211,212,5,97,0,0,212,
        213,5,100,0,0,213,214,5,100,0,0,214,215,5,114,0,0,215,216,5,101,
        0,0,216,217,5,115,0,0,217,218,5,115,0,0,218,26,1,0,0,0,219,220,5,
        110,0,0,220,221,5,101,0,0,221,222,5,105,0,0,222,223,5,103,0,0,223,
        224,5,104,0,0,224,225,5,98,0,0,225,226,5,111,0,0,226,227,5,114,0,
        0,227,28,1,0,0,0,228,229,5,112,0,0,229,230,5,101,0,0,230,231,5,101,
        0,0,231,232,5,114,0,0,232,233,5,45,0,0,233,234,5,97,0,0,234,235,
        5,115,0,0,235,30,1,0,0,0,236,237,5,61,0,0,237,32,1,0,0,0,238,239,
        5,44,0,0,239,34,1,0,0,0,240,244,7,0,0,0,241,243,7,0,0,0,242,241,
        1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,36,1,
        0,0,0,246,244,1,0,0,0,247,248,5,101,0,0,248,249,5,116,0,0,249,250,
        5,104,0,0,250,251,5,101,0,0,251,252,5,114,0,0,252,253,1,0,0,0,253,
        280,3,49,24,0,254,255,5,115,0,0,255,256,5,102,0,0,256,257,5,112,
        0,0,257,258,1,0,0,0,258,263,3,49,24,0,259,260,5,45,0,0,260,262,3,
        49,24,0,261,259,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,
        1,0,0,0,264,280,1,0,0,0,265,263,1,0,0,0,266,267,5,113,0,0,267,268,
        5,115,0,0,268,269,5,102,0,0,269,270,5,112,0,0,270,271,1,0,0,0,271,
        276,3,49,24,0,272,273,5,45,0,0,273,275,3,49,24,0,274,272,1,0,0,0,
        275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,280,1,0,0,0,
        278,276,1,0,0,0,279,247,1,0,0,0,279,254,1,0,0,0,279,266,1,0,0,0,
        280,38,1,0,0,0,281,282,5,48,0,0,282,283,5,120,0,0,283,284,1,0,0,
        0,284,285,3,49,24,0,285,286,5,58,0,0,286,288,1,0,0,0,287,281,1,0,
        0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,290,3,49,24,0,290,291,5,
        58,0,0,291,292,3,49,24,0,292,40,1,0,0,0,293,295,5,46,0,0,294,293,
        1,0,0,0,294,295,1,0,0,0,295,296,1,0,0,0,296,301,3,35,17,0,297,300,
        2,45,47,0,298,300,3,35,17,0,299,297,1,0,0,0,299,298,1,0,0,0,300,
        303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,42,1,0,0,0,303,301,
        1,0,0,0,304,305,5,46,0,0,305,306,3,35,17,0,306,44,1,0,0,0,307,308,
        3,35,17,0,308,309,2,45,46,0,309,310,3,35,17,0,310,46,1,0,0,0,311,
        315,5,34,0,0,312,314,9,0,0,0,313,312,1,0,0,0,314,317,1,0,0,0,315,
        316,1,0,0,0,315,313,1,0,0,0,316,318,1,0,0,0,317,315,1,0,0,0,318,
        319,5,34,0,0,319,48,1,0,0,0,320,322,7,1,0,0,321,320,1,0,0,0,322,
        323,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,50,1,0,0,0,325,326,
        3,49,24,0,326,327,5,46,0,0,327,328,3,49,24,0,328,329,5,46,0,0,329,
        330,3,49,24,0,330,331,5,46,0,0,331,332,3,49,24,0,332,52,1,0,0,0,
        333,338,3,63,31,0,334,335,5,58,0,0,335,337,3,63,31,0,336,334,1,0,
        0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,343,1,0,
        0,0,340,338,1,0,0,0,341,343,3,55,27,0,342,333,1,0,0,0,342,341,1,
        0,0,0,343,54,1,0,0,0,344,349,3,63,31,0,345,346,5,58,0,0,346,348,
        3,63,31,0,347,345,1,0,0,0,348,351,1,0,0,0,349,347,1,0,0,0,349,350,
        1,0,0,0,350,358,1,0,0,0,351,349,1,0,0,0,352,353,5,58,0,0,353,354,
        5,58,0,0,354,355,1,0,0,0,355,359,3,63,31,0,356,357,5,58,0,0,357,
        359,5,58,0,0,358,352,1,0,0,0,358,356,1,0,0,0,359,364,1,0,0,0,360,
        361,5,58,0,0,361,363,3,63,31,0,362,360,1,0,0,0,363,366,1,0,0,0,364,
        362,1,0,0,0,364,365,1,0,0,0,365,370,1,0,0,0,366,364,1,0,0,0,367,
        368,5,58,0,0,368,370,5,58,0,0,369,344,1,0,0,0,369,367,1,0,0,0,370,
        56,1,0,0,0,371,372,3,51,25,0,372,373,5,47,0,0,373,374,3,49,24,0,
        374,58,1,0,0,0,375,376,3,53,26,0,376,377,5,47,0,0,377,378,3,49,24,
        0,378,60,1,0,0,0,379,380,5,121,0,0,380,381,5,101,0,0,381,385,5,115,
        0,0,382,383,5,110,0,0,383,385,5,111,0,0,384,379,1,0,0,0,384,382,
        1,0,0,0,385,62,1,0,0,0,386,388,3,65,32,0,387,389,3,65,32,0,388,387,
        1,0,0,0,388,389,1,0,0,0,389,391,1,0,0,0,390,392,3,65,32,0,391,390,
        1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,395,3,65,32,0,394,393,
        1,0,0,0,394,395,1,0,0,0,395,64,1,0,0,0,396,397,7,2,0,0,397,66,1,
        0,0,0,398,402,5,35,0,0,399,401,9,0,0,0,400,399,1,0,0,0,401,404,1,
        0,0,0,402,403,1,0,0,0,402,400,1,0,0,0,403,406,1,0,0,0,404,402,1,
        0,0,0,405,407,5,13,0,0,406,405,1,0,0,0,406,407,1,0,0,0,407,408,1,
        0,0,0,408,409,5,10,0,0,409,410,1,0,0,0,410,411,6,33,0,0,411,68,1,
        0,0,0,412,414,5,32,0,0,413,412,1,0,0,0,414,415,1,0,0,0,415,413,1,
        0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,418,6,34,0,0,418,70,1,
        0,0,0,419,420,5,92,0,0,420,421,3,73,36,0,421,422,1,0,0,0,422,423,
        6,35,0,0,423,72,1,0,0,0,424,426,5,13,0,0,425,424,1,0,0,0,425,426,
        1,0,0,0,426,427,1,0,0,0,427,428,5,10,0,0,428,74,1,0,0,0,429,433,
        7,3,0,0,430,432,7,4,0,0,431,430,1,0,0,0,432,435,1,0,0,0,433,431,
        1,0,0,0,433,434,1,0,0,0,434,76,1,0,0,0,435,433,1,0,0,0,26,0,244,
        263,276,279,287,294,299,301,315,323,338,342,349,358,364,369,384,
        388,391,394,402,406,415,425,433,1,6,0,0
    ]

class JunosLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    WORD = 18
    INTERFACE_NAME = 19
    COMMUNITY = 20
    COMPLEX_WORD = 21
    COMPLEX_WORD2 = 22
    COMPLEX_WORD3 = 23
    STRING = 24
    NUMBER = 25
    IP_ADDRESS = 26
    IPV6_ADDRESS = 27
    IPV6_SHORTHAND = 28
    NETWORK = 29
    IPV6_NETWORK = 30
    BOOLEAN = 31
    HEX_QUAD = 32
    HEX_DIGIT = 33
    COMMENT = 34
    WS = 35
    CONTINUED_LINE = 36
    NEWLINE = 37
    ID = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'set'", "'deactivate'", "'routing-options autonomous-system'", 
            "'interfaces'", "'address'", "'vlan-id'", "'unit '", "'family'", 
            "'inet'", "'inet6'", "'version'", "'protocols bgp group'", "'local-address'", 
            "'neighbor'", "'peer-as'", "'='", "','" ]

    symbolicNames = [ "<INVALID>",
            "WORD", "INTERFACE_NAME", "COMMUNITY", "COMPLEX_WORD", "COMPLEX_WORD2", 
            "COMPLEX_WORD3", "STRING", "NUMBER", "IP_ADDRESS", "IPV6_ADDRESS", 
            "IPV6_SHORTHAND", "NETWORK", "IPV6_NETWORK", "BOOLEAN", "HEX_QUAD", 
            "HEX_DIGIT", "COMMENT", "WS", "CONTINUED_LINE", "NEWLINE", "ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "WORD", "INTERFACE_NAME", "COMMUNITY", 
                  "COMPLEX_WORD", "COMPLEX_WORD2", "COMPLEX_WORD3", "STRING", 
                  "NUMBER", "IP_ADDRESS", "IPV6_ADDRESS", "IPV6_SHORTHAND", 
                  "NETWORK", "IPV6_NETWORK", "BOOLEAN", "HEX_QUAD", "HEX_DIGIT", 
                  "COMMENT", "WS", "CONTINUED_LINE", "NEWLINE", "ID" ]

    grammarFileName = "Junos.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


