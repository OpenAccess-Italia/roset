# Generated from Routeros.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,400,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,221,8,15,10,15,12,
        15,224,9,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,234,8,15,
        10,15,12,15,237,9,15,3,15,239,8,15,1,16,1,16,1,16,1,16,1,16,1,16,
        3,16,247,8,16,1,16,1,16,1,16,1,16,1,17,4,17,254,8,17,11,17,12,17,
        255,1,18,3,18,259,8,18,1,18,1,18,1,18,5,18,264,8,18,10,18,12,18,
        267,9,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,5,21,278,8,
        21,10,21,12,21,281,9,21,1,21,1,21,1,22,4,22,286,8,22,11,22,12,22,
        287,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,5,24,
        301,8,24,10,24,12,24,304,9,24,1,24,3,24,307,8,24,1,25,1,25,1,25,
        5,25,312,8,25,10,25,12,25,315,9,25,1,25,1,25,1,25,1,25,1,25,1,25,
        3,25,323,8,25,1,25,1,25,5,25,327,8,25,10,25,12,25,330,9,25,1,25,
        1,25,3,25,334,8,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,
        1,28,1,28,1,28,1,28,3,28,349,8,28,1,29,1,29,3,29,353,8,29,1,29,3,
        29,356,8,29,1,29,3,29,359,8,29,1,30,1,30,1,31,1,31,5,31,365,8,31,
        10,31,12,31,368,9,31,1,31,3,31,371,8,31,1,31,1,31,1,31,1,31,1,32,
        4,32,378,8,32,11,32,12,32,379,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
        1,34,3,34,390,8,34,1,34,1,34,1,35,1,35,5,35,396,8,35,10,35,12,35,
        399,9,35,2,279,366,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,1,0,5,6,0,42,42,45,45,48,57,65,90,
        95,95,97,122,1,0,48,57,3,0,48,57,65,70,97,102,2,0,65,90,97,122,5,
        0,45,45,48,57,65,90,95,95,97,122,425,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,93,1,
        0,0,0,5,97,1,0,0,0,7,99,1,0,0,0,9,104,1,0,0,0,11,117,1,0,0,0,13,
        119,1,0,0,0,15,121,1,0,0,0,17,137,1,0,0,0,19,141,1,0,0,0,21,153,
        1,0,0,0,23,167,1,0,0,0,25,191,1,0,0,0,27,202,1,0,0,0,29,204,1,0,
        0,0,31,238,1,0,0,0,33,246,1,0,0,0,35,253,1,0,0,0,37,258,1,0,0,0,
        39,268,1,0,0,0,41,271,1,0,0,0,43,275,1,0,0,0,45,285,1,0,0,0,47,289,
        1,0,0,0,49,306,1,0,0,0,51,333,1,0,0,0,53,335,1,0,0,0,55,339,1,0,
        0,0,57,348,1,0,0,0,59,350,1,0,0,0,61,360,1,0,0,0,63,362,1,0,0,0,
        65,377,1,0,0,0,67,383,1,0,0,0,69,389,1,0,0,0,71,393,1,0,0,0,73,74,
        5,47,0,0,74,75,5,105,0,0,75,76,5,110,0,0,76,77,5,116,0,0,77,78,5,
        101,0,0,78,79,5,114,0,0,79,80,5,102,0,0,80,81,5,97,0,0,81,82,5,99,
        0,0,82,83,5,101,0,0,83,84,5,32,0,0,84,85,5,101,0,0,85,86,5,116,0,
        0,86,87,5,104,0,0,87,88,5,101,0,0,88,89,5,114,0,0,89,90,5,110,0,
        0,90,91,5,101,0,0,91,92,5,116,0,0,92,2,1,0,0,0,93,94,5,115,0,0,94,
        95,5,101,0,0,95,96,5,116,0,0,96,4,1,0,0,0,97,98,5,91,0,0,98,6,1,
        0,0,0,99,100,5,102,0,0,100,101,5,105,0,0,101,102,5,110,0,0,102,103,
        5,100,0,0,103,8,1,0,0,0,104,105,5,100,0,0,105,106,5,101,0,0,106,
        107,5,102,0,0,107,108,5,97,0,0,108,109,5,117,0,0,109,110,5,108,0,
        0,110,111,5,116,0,0,111,112,5,45,0,0,112,113,5,110,0,0,113,114,5,
        97,0,0,114,115,5,109,0,0,115,116,5,101,0,0,116,10,1,0,0,0,117,118,
        5,61,0,0,118,12,1,0,0,0,119,120,5,93,0,0,120,14,1,0,0,0,121,122,
        5,47,0,0,122,123,5,105,0,0,123,124,5,110,0,0,124,125,5,116,0,0,125,
        126,5,101,0,0,126,127,5,114,0,0,127,128,5,102,0,0,128,129,5,97,0,
        0,129,130,5,99,0,0,130,131,5,101,0,0,131,132,5,32,0,0,132,133,5,
        118,0,0,133,134,5,108,0,0,134,135,5,97,0,0,135,136,5,110,0,0,136,
        16,1,0,0,0,137,138,5,97,0,0,138,139,5,100,0,0,139,140,5,100,0,0,
        140,18,1,0,0,0,141,142,5,47,0,0,142,143,5,105,0,0,143,144,5,112,
        0,0,144,145,5,32,0,0,145,146,5,97,0,0,146,147,5,100,0,0,147,148,
        5,100,0,0,148,149,5,114,0,0,149,150,5,101,0,0,150,151,5,115,0,0,
        151,152,5,115,0,0,152,20,1,0,0,0,153,154,5,47,0,0,154,155,5,105,
        0,0,155,156,5,112,0,0,156,157,5,118,0,0,157,158,5,54,0,0,158,159,
        5,32,0,0,159,160,5,97,0,0,160,161,5,100,0,0,161,162,5,100,0,0,162,
        163,5,114,0,0,163,164,5,101,0,0,164,165,5,115,0,0,165,166,5,115,
        0,0,166,22,1,0,0,0,167,168,5,47,0,0,168,169,5,114,0,0,169,170,5,
        111,0,0,170,171,5,117,0,0,171,172,5,116,0,0,172,173,5,105,0,0,173,
        174,5,110,0,0,174,175,5,103,0,0,175,176,5,32,0,0,176,177,5,98,0,
        0,177,178,5,103,0,0,178,179,5,112,0,0,179,180,5,32,0,0,180,181,5,
        99,0,0,181,182,5,111,0,0,182,183,5,110,0,0,183,184,5,110,0,0,184,
        185,5,101,0,0,185,186,5,99,0,0,186,187,5,116,0,0,187,188,5,105,0,
        0,188,189,5,111,0,0,189,190,5,110,0,0,190,24,1,0,0,0,191,192,5,47,
        0,0,192,193,5,105,0,0,193,194,5,110,0,0,194,195,5,116,0,0,195,196,
        5,101,0,0,196,197,5,114,0,0,197,198,5,102,0,0,198,199,5,97,0,0,199,
        200,5,99,0,0,200,201,5,101,0,0,201,26,1,0,0,0,202,203,5,47,0,0,203,
        28,1,0,0,0,204,205,5,44,0,0,205,30,1,0,0,0,206,207,5,101,0,0,207,
        208,5,116,0,0,208,209,5,104,0,0,209,210,5,101,0,0,210,211,5,114,
        0,0,211,212,1,0,0,0,212,239,3,45,22,0,213,214,5,115,0,0,214,215,
        5,102,0,0,215,216,5,112,0,0,216,217,1,0,0,0,217,222,3,45,22,0,218,
        219,5,45,0,0,219,221,3,45,22,0,220,218,1,0,0,0,221,224,1,0,0,0,222,
        220,1,0,0,0,222,223,1,0,0,0,223,239,1,0,0,0,224,222,1,0,0,0,225,
        226,5,113,0,0,226,227,5,115,0,0,227,228,5,102,0,0,228,229,5,112,
        0,0,229,230,1,0,0,0,230,235,3,45,22,0,231,232,5,45,0,0,232,234,3,
        45,22,0,233,231,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,
        1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,0,238,206,1,0,0,0,238,213,
        1,0,0,0,238,225,1,0,0,0,239,32,1,0,0,0,240,241,5,48,0,0,241,242,
        5,120,0,0,242,243,1,0,0,0,243,244,3,45,22,0,244,245,5,58,0,0,245,
        247,1,0,0,0,246,240,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,
        249,3,45,22,0,249,250,5,58,0,0,250,251,3,45,22,0,251,34,1,0,0,0,
        252,254,7,0,0,0,253,252,1,0,0,0,254,255,1,0,0,0,255,253,1,0,0,0,
        255,256,1,0,0,0,256,36,1,0,0,0,257,259,5,46,0,0,258,257,1,0,0,0,
        258,259,1,0,0,0,259,260,1,0,0,0,260,265,3,35,17,0,261,264,2,45,47,
        0,262,264,3,35,17,0,263,261,1,0,0,0,263,262,1,0,0,0,264,267,1,0,
        0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,38,1,0,0,0,267,265,1,0,0,
        0,268,269,5,46,0,0,269,270,3,35,17,0,270,40,1,0,0,0,271,272,3,35,
        17,0,272,273,2,45,46,0,273,274,3,35,17,0,274,42,1,0,0,0,275,279,
        5,34,0,0,276,278,9,0,0,0,277,276,1,0,0,0,278,281,1,0,0,0,279,280,
        1,0,0,0,279,277,1,0,0,0,280,282,1,0,0,0,281,279,1,0,0,0,282,283,
        5,34,0,0,283,44,1,0,0,0,284,286,7,1,0,0,285,284,1,0,0,0,286,287,
        1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,46,1,0,0,0,289,290,3,
        45,22,0,290,291,5,46,0,0,291,292,3,45,22,0,292,293,5,46,0,0,293,
        294,3,45,22,0,294,295,5,46,0,0,295,296,3,45,22,0,296,48,1,0,0,0,
        297,302,3,59,29,0,298,299,5,58,0,0,299,301,3,59,29,0,300,298,1,0,
        0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,307,1,0,
        0,0,304,302,1,0,0,0,305,307,3,51,25,0,306,297,1,0,0,0,306,305,1,
        0,0,0,307,50,1,0,0,0,308,313,3,59,29,0,309,310,5,58,0,0,310,312,
        3,59,29,0,311,309,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,
        1,0,0,0,314,322,1,0,0,0,315,313,1,0,0,0,316,317,5,58,0,0,317,318,
        5,58,0,0,318,319,1,0,0,0,319,323,3,59,29,0,320,321,5,58,0,0,321,
        323,5,58,0,0,322,316,1,0,0,0,322,320,1,0,0,0,323,328,1,0,0,0,324,
        325,5,58,0,0,325,327,3,59,29,0,326,324,1,0,0,0,327,330,1,0,0,0,328,
        326,1,0,0,0,328,329,1,0,0,0,329,334,1,0,0,0,330,328,1,0,0,0,331,
        332,5,58,0,0,332,334,5,58,0,0,333,308,1,0,0,0,333,331,1,0,0,0,334,
        52,1,0,0,0,335,336,3,47,23,0,336,337,5,47,0,0,337,338,3,45,22,0,
        338,54,1,0,0,0,339,340,3,49,24,0,340,341,5,47,0,0,341,342,3,45,22,
        0,342,56,1,0,0,0,343,344,5,121,0,0,344,345,5,101,0,0,345,349,5,115,
        0,0,346,347,5,110,0,0,347,349,5,111,0,0,348,343,1,0,0,0,348,346,
        1,0,0,0,349,58,1,0,0,0,350,352,3,61,30,0,351,353,3,61,30,0,352,351,
        1,0,0,0,352,353,1,0,0,0,353,355,1,0,0,0,354,356,3,61,30,0,355,354,
        1,0,0,0,355,356,1,0,0,0,356,358,1,0,0,0,357,359,3,61,30,0,358,357,
        1,0,0,0,358,359,1,0,0,0,359,60,1,0,0,0,360,361,7,2,0,0,361,62,1,
        0,0,0,362,366,5,35,0,0,363,365,9,0,0,0,364,363,1,0,0,0,365,368,1,
        0,0,0,366,367,1,0,0,0,366,364,1,0,0,0,367,370,1,0,0,0,368,366,1,
        0,0,0,369,371,5,13,0,0,370,369,1,0,0,0,370,371,1,0,0,0,371,372,1,
        0,0,0,372,373,5,10,0,0,373,374,1,0,0,0,374,375,6,31,0,0,375,64,1,
        0,0,0,376,378,5,32,0,0,377,376,1,0,0,0,378,379,1,0,0,0,379,377,1,
        0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,382,6,32,0,0,382,66,1,
        0,0,0,383,384,5,92,0,0,384,385,3,69,34,0,385,386,1,0,0,0,386,387,
        6,33,0,0,387,68,1,0,0,0,388,390,5,13,0,0,389,388,1,0,0,0,389,390,
        1,0,0,0,390,391,1,0,0,0,391,392,5,10,0,0,392,70,1,0,0,0,393,397,
        7,3,0,0,394,396,7,4,0,0,395,394,1,0,0,0,396,399,1,0,0,0,397,395,
        1,0,0,0,397,398,1,0,0,0,398,72,1,0,0,0,399,397,1,0,0,0,26,0,222,
        235,238,246,255,258,263,265,279,287,302,306,313,322,328,333,348,
        352,355,358,366,370,379,389,397,1,6,0,0
    ]

class RouterosLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    INTERFACE_NAME = 16
    COMMUNITY = 17
    WORD = 18
    COMPLEX_WORD = 19
    COMPLEX_WORD2 = 20
    COMPLEX_WORD3 = 21
    STRING = 22
    NUMBER = 23
    IP_ADDRESS = 24
    IPV6_ADDRESS = 25
    IPV6_SHORTHAND = 26
    NETWORK = 27
    IPV6_NETWORK = 28
    BOOLEAN = 29
    HEX_QUAD = 30
    HEX_DIGIT = 31
    COMMENT = 32
    WS = 33
    CONTINUED_LINE = 34
    NEWLINE = 35
    ID = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'/interface ethernet'", "'set'", "'['", "'find'", "'default-name'", 
            "'='", "']'", "'/interface vlan'", "'add'", "'/ip address'", 
            "'/ipv6 address'", "'/routing bgp connection'", "'/interface'", 
            "'/'", "','" ]

    symbolicNames = [ "<INVALID>",
            "INTERFACE_NAME", "COMMUNITY", "WORD", "COMPLEX_WORD", "COMPLEX_WORD2", 
            "COMPLEX_WORD3", "STRING", "NUMBER", "IP_ADDRESS", "IPV6_ADDRESS", 
            "IPV6_SHORTHAND", "NETWORK", "IPV6_NETWORK", "BOOLEAN", "HEX_QUAD", 
            "HEX_DIGIT", "COMMENT", "WS", "CONTINUED_LINE", "NEWLINE", "ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "INTERFACE_NAME", "COMMUNITY", "WORD", "COMPLEX_WORD", 
                  "COMPLEX_WORD2", "COMPLEX_WORD3", "STRING", "NUMBER", 
                  "IP_ADDRESS", "IPV6_ADDRESS", "IPV6_SHORTHAND", "NETWORK", 
                  "IPV6_NETWORK", "BOOLEAN", "HEX_QUAD", "HEX_DIGIT", "COMMENT", 
                  "WS", "CONTINUED_LINE", "NEWLINE", "ID" ]

    grammarFileName = "Routeros.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


