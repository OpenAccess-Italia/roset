# Generated from Routeros.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,410,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,
        15,225,8,15,10,15,12,15,228,9,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,5,15,238,8,15,10,15,12,15,241,9,15,3,15,243,8,15,1,16,4,
        16,246,8,16,11,16,12,16,247,1,17,3,17,251,8,17,1,17,1,17,1,17,5,
        17,256,8,17,10,17,12,17,259,9,17,1,18,1,18,1,18,1,19,1,19,1,19,1,
        19,1,20,1,20,5,20,270,8,20,10,20,12,20,273,9,20,1,20,1,20,1,21,4,
        21,278,8,21,11,21,12,21,279,1,22,4,22,283,8,22,11,22,12,22,284,1,
        22,1,22,4,22,289,8,22,11,22,12,22,290,1,22,1,22,4,22,295,8,22,11,
        22,12,22,296,1,22,1,22,4,22,301,8,22,11,22,12,22,302,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,3,23,312,8,23,1,24,1,24,1,24,5,24,317,8,24,
        10,24,12,24,320,9,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,328,8,24,
        1,24,1,24,5,24,332,8,24,10,24,12,24,335,9,24,1,25,1,25,1,25,4,25,
        340,8,25,11,25,12,25,341,1,26,1,26,1,26,4,26,347,8,26,11,26,12,26,
        348,1,27,1,27,1,27,1,27,1,27,3,27,356,8,27,1,28,1,28,1,28,1,28,3,
        28,362,8,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,
        31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,5,34,382,8,34,10,34,12,34,
        385,9,34,1,34,3,34,388,8,34,1,34,1,34,1,34,1,34,1,35,4,35,395,8,
        35,11,35,12,35,396,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,3,37,
        407,8,37,1,37,1,37,2,271,383,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,0,
        59,0,61,0,63,0,65,0,67,0,69,29,71,30,73,31,75,32,1,0,4,6,0,42,42,
        45,45,48,57,65,90,95,95,97,122,1,0,48,57,3,0,48,57,65,70,97,102,
        2,0,9,9,32,32,431,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,97,1,0,0,
        0,5,101,1,0,0,0,7,103,1,0,0,0,9,108,1,0,0,0,11,121,1,0,0,0,13,123,
        1,0,0,0,15,125,1,0,0,0,17,141,1,0,0,0,19,145,1,0,0,0,21,157,1,0,
        0,0,23,171,1,0,0,0,25,195,1,0,0,0,27,206,1,0,0,0,29,208,1,0,0,0,
        31,242,1,0,0,0,33,245,1,0,0,0,35,250,1,0,0,0,37,260,1,0,0,0,39,263,
        1,0,0,0,41,267,1,0,0,0,43,277,1,0,0,0,45,282,1,0,0,0,47,311,1,0,
        0,0,49,313,1,0,0,0,51,336,1,0,0,0,53,343,1,0,0,0,55,355,1,0,0,0,
        57,361,1,0,0,0,59,363,1,0,0,0,61,368,1,0,0,0,63,372,1,0,0,0,65,375,
        1,0,0,0,67,377,1,0,0,0,69,379,1,0,0,0,71,394,1,0,0,0,73,400,1,0,
        0,0,75,406,1,0,0,0,77,78,5,47,0,0,78,79,5,105,0,0,79,80,5,110,0,
        0,80,81,5,116,0,0,81,82,5,101,0,0,82,83,5,114,0,0,83,84,5,102,0,
        0,84,85,5,97,0,0,85,86,5,99,0,0,86,87,5,101,0,0,87,88,5,32,0,0,88,
        89,5,101,0,0,89,90,5,116,0,0,90,91,5,104,0,0,91,92,5,101,0,0,92,
        93,5,114,0,0,93,94,5,110,0,0,94,95,5,101,0,0,95,96,5,116,0,0,96,
        2,1,0,0,0,97,98,5,115,0,0,98,99,5,101,0,0,99,100,5,116,0,0,100,4,
        1,0,0,0,101,102,5,91,0,0,102,6,1,0,0,0,103,104,5,102,0,0,104,105,
        5,105,0,0,105,106,5,110,0,0,106,107,5,100,0,0,107,8,1,0,0,0,108,
        109,5,100,0,0,109,110,5,101,0,0,110,111,5,102,0,0,111,112,5,97,0,
        0,112,113,5,117,0,0,113,114,5,108,0,0,114,115,5,116,0,0,115,116,
        5,45,0,0,116,117,5,110,0,0,117,118,5,97,0,0,118,119,5,109,0,0,119,
        120,5,101,0,0,120,10,1,0,0,0,121,122,5,61,0,0,122,12,1,0,0,0,123,
        124,5,93,0,0,124,14,1,0,0,0,125,126,5,47,0,0,126,127,5,105,0,0,127,
        128,5,110,0,0,128,129,5,116,0,0,129,130,5,101,0,0,130,131,5,114,
        0,0,131,132,5,102,0,0,132,133,5,97,0,0,133,134,5,99,0,0,134,135,
        5,101,0,0,135,136,5,32,0,0,136,137,5,118,0,0,137,138,5,108,0,0,138,
        139,5,97,0,0,139,140,5,110,0,0,140,16,1,0,0,0,141,142,5,97,0,0,142,
        143,5,100,0,0,143,144,5,100,0,0,144,18,1,0,0,0,145,146,5,47,0,0,
        146,147,5,105,0,0,147,148,5,112,0,0,148,149,5,32,0,0,149,150,5,97,
        0,0,150,151,5,100,0,0,151,152,5,100,0,0,152,153,5,114,0,0,153,154,
        5,101,0,0,154,155,5,115,0,0,155,156,5,115,0,0,156,20,1,0,0,0,157,
        158,5,47,0,0,158,159,5,105,0,0,159,160,5,112,0,0,160,161,5,118,0,
        0,161,162,5,54,0,0,162,163,5,32,0,0,163,164,5,97,0,0,164,165,5,100,
        0,0,165,166,5,100,0,0,166,167,5,114,0,0,167,168,5,101,0,0,168,169,
        5,115,0,0,169,170,5,115,0,0,170,22,1,0,0,0,171,172,5,47,0,0,172,
        173,5,114,0,0,173,174,5,111,0,0,174,175,5,117,0,0,175,176,5,116,
        0,0,176,177,5,105,0,0,177,178,5,110,0,0,178,179,5,103,0,0,179,180,
        5,32,0,0,180,181,5,98,0,0,181,182,5,103,0,0,182,183,5,112,0,0,183,
        184,5,32,0,0,184,185,5,99,0,0,185,186,5,111,0,0,186,187,5,110,0,
        0,187,188,5,110,0,0,188,189,5,101,0,0,189,190,5,99,0,0,190,191,5,
        116,0,0,191,192,5,105,0,0,192,193,5,111,0,0,193,194,5,110,0,0,194,
        24,1,0,0,0,195,196,5,47,0,0,196,197,5,105,0,0,197,198,5,110,0,0,
        198,199,5,116,0,0,199,200,5,101,0,0,200,201,5,114,0,0,201,202,5,
        102,0,0,202,203,5,97,0,0,203,204,5,99,0,0,204,205,5,101,0,0,205,
        26,1,0,0,0,206,207,5,47,0,0,207,28,1,0,0,0,208,209,5,44,0,0,209,
        30,1,0,0,0,210,211,5,101,0,0,211,212,5,116,0,0,212,213,5,104,0,0,
        213,214,5,101,0,0,214,215,5,114,0,0,215,216,1,0,0,0,216,243,3,43,
        21,0,217,218,5,115,0,0,218,219,5,102,0,0,219,220,5,112,0,0,220,221,
        1,0,0,0,221,226,3,43,21,0,222,223,5,45,0,0,223,225,3,43,21,0,224,
        222,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,
        243,1,0,0,0,228,226,1,0,0,0,229,230,5,113,0,0,230,231,5,115,0,0,
        231,232,5,102,0,0,232,233,5,112,0,0,233,234,1,0,0,0,234,239,3,43,
        21,0,235,236,5,45,0,0,236,238,3,43,21,0,237,235,1,0,0,0,238,241,
        1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,243,1,0,0,0,241,239,
        1,0,0,0,242,210,1,0,0,0,242,217,1,0,0,0,242,229,1,0,0,0,243,32,1,
        0,0,0,244,246,7,0,0,0,245,244,1,0,0,0,246,247,1,0,0,0,247,245,1,
        0,0,0,247,248,1,0,0,0,248,34,1,0,0,0,249,251,5,46,0,0,250,249,1,
        0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,257,3,33,16,0,253,256,
        2,45,47,0,254,256,3,33,16,0,255,253,1,0,0,0,255,254,1,0,0,0,256,
        259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,36,1,0,0,0,259,257,
        1,0,0,0,260,261,5,46,0,0,261,262,3,33,16,0,262,38,1,0,0,0,263,264,
        3,33,16,0,264,265,2,45,46,0,265,266,3,33,16,0,266,40,1,0,0,0,267,
        271,5,34,0,0,268,270,9,0,0,0,269,268,1,0,0,0,270,273,1,0,0,0,271,
        272,1,0,0,0,271,269,1,0,0,0,272,274,1,0,0,0,273,271,1,0,0,0,274,
        275,5,34,0,0,275,42,1,0,0,0,276,278,7,1,0,0,277,276,1,0,0,0,278,
        279,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,44,1,0,0,0,281,283,
        7,1,0,0,282,281,1,0,0,0,283,284,1,0,0,0,284,282,1,0,0,0,284,285,
        1,0,0,0,285,286,1,0,0,0,286,288,5,46,0,0,287,289,7,1,0,0,288,287,
        1,0,0,0,289,290,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,292,
        1,0,0,0,292,294,5,46,0,0,293,295,7,1,0,0,294,293,1,0,0,0,295,296,
        1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,300,
        5,46,0,0,299,301,7,1,0,0,300,299,1,0,0,0,301,302,1,0,0,0,302,300,
        1,0,0,0,302,303,1,0,0,0,303,46,1,0,0,0,304,305,3,57,28,0,305,306,
        5,58,0,0,306,307,3,57,28,0,307,308,1,0,0,0,308,309,6,23,0,0,309,
        312,1,0,0,0,310,312,3,49,24,0,311,304,1,0,0,0,311,310,1,0,0,0,312,
        48,1,0,0,0,313,318,3,57,28,0,314,315,5,58,0,0,315,317,3,57,28,0,
        316,314,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,
        319,327,1,0,0,0,320,318,1,0,0,0,321,322,5,58,0,0,322,323,5,58,0,
        0,323,324,1,0,0,0,324,328,3,57,28,0,325,326,5,58,0,0,326,328,5,58,
        0,0,327,321,1,0,0,0,327,325,1,0,0,0,328,333,1,0,0,0,329,330,5,58,
        0,0,330,332,3,57,28,0,331,329,1,0,0,0,332,335,1,0,0,0,333,331,1,
        0,0,0,333,334,1,0,0,0,334,50,1,0,0,0,335,333,1,0,0,0,336,337,3,45,
        22,0,337,339,5,47,0,0,338,340,7,1,0,0,339,338,1,0,0,0,340,341,1,
        0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,52,1,0,0,0,343,344,3,47,
        23,0,344,346,5,47,0,0,345,347,7,1,0,0,346,345,1,0,0,0,347,348,1,
        0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,54,1,0,0,0,350,351,5,121,
        0,0,351,352,5,101,0,0,352,356,5,115,0,0,353,354,5,110,0,0,354,356,
        5,111,0,0,355,350,1,0,0,0,355,353,1,0,0,0,356,56,1,0,0,0,357,362,
        3,59,29,0,358,362,3,61,30,0,359,362,3,63,31,0,360,362,3,65,32,0,
        361,357,1,0,0,0,361,358,1,0,0,0,361,359,1,0,0,0,361,360,1,0,0,0,
        362,58,1,0,0,0,363,364,3,67,33,0,364,365,3,67,33,0,365,366,3,67,
        33,0,366,367,3,67,33,0,367,60,1,0,0,0,368,369,3,67,33,0,369,370,
        3,67,33,0,370,371,3,67,33,0,371,62,1,0,0,0,372,373,3,67,33,0,373,
        374,3,67,33,0,374,64,1,0,0,0,375,376,3,67,33,0,376,66,1,0,0,0,377,
        378,7,2,0,0,378,68,1,0,0,0,379,383,5,35,0,0,380,382,9,0,0,0,381,
        380,1,0,0,0,382,385,1,0,0,0,383,384,1,0,0,0,383,381,1,0,0,0,384,
        387,1,0,0,0,385,383,1,0,0,0,386,388,5,13,0,0,387,386,1,0,0,0,387,
        388,1,0,0,0,388,389,1,0,0,0,389,390,5,10,0,0,390,391,1,0,0,0,391,
        392,6,34,1,0,392,70,1,0,0,0,393,395,7,3,0,0,394,393,1,0,0,0,395,
        396,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,398,1,0,0,0,398,
        399,6,35,1,0,399,72,1,0,0,0,400,401,5,92,0,0,401,402,3,75,37,0,402,
        403,1,0,0,0,403,404,6,36,1,0,404,74,1,0,0,0,405,407,5,13,0,0,406,
        405,1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,409,5,10,0,0,409,
        76,1,0,0,0,26,0,226,239,242,247,250,255,257,271,279,284,290,296,
        302,311,318,327,333,341,348,355,361,383,387,396,406,2,1,23,0,6,0,
        0
    ]

class RouterosLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    INTERFACE_NAME = 16
    WORD = 17
    COMPLEX_WORD = 18
    COMPLEX_WORD2 = 19
    COMPLEX_WORD3 = 20
    STRING = 21
    NUMBER = 22
    IP_ADDRESS = 23
    IPV6_ADDRESS = 24
    IPV6_SHORTHAND = 25
    NETWORK = 26
    IPV6_NETWORK = 27
    BOOLEAN = 28
    COMMENT = 29
    WS = 30
    CONTINUED_LINE = 31
    NEWLINE = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'/interface ethernet'", "'set'", "'['", "'find'", "'default-name'", 
            "'='", "']'", "'/interface vlan'", "'add'", "'/ip address'", 
            "'/ipv6 address'", "'/routing bgp connection'", "'/interface'", 
            "'/'", "','" ]

    symbolicNames = [ "<INVALID>",
            "INTERFACE_NAME", "WORD", "COMPLEX_WORD", "COMPLEX_WORD2", "COMPLEX_WORD3", 
            "STRING", "NUMBER", "IP_ADDRESS", "IPV6_ADDRESS", "IPV6_SHORTHAND", 
            "NETWORK", "IPV6_NETWORK", "BOOLEAN", "COMMENT", "WS", "CONTINUED_LINE", 
            "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "INTERFACE_NAME", "WORD", "COMPLEX_WORD", "COMPLEX_WORD2", 
                  "COMPLEX_WORD3", "STRING", "NUMBER", "IP_ADDRESS", "IPV6_ADDRESS", 
                  "IPV6_SHORTHAND", "NETWORK", "IPV6_NETWORK", "BOOLEAN", 
                  "HEX_QUAD", "HEX_4", "HEX_3", "HEX_2", "HEX_1", "HEX_DIGIT", 
                  "COMMENT", "WS", "CONTINUED_LINE", "NEWLINE" ]

    grammarFileName = "Routeros.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[23] = self.IPV6_ADDRESS_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def IPV6_ADDRESS_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            7
     


