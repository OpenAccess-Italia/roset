# Generated from Routeros.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,426,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,5,16,241,8,16,10,16,12,16,244,9,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,5,16,254,8,16,10,16,12,16,257,9,16,3,16,259,
        8,16,1,17,4,17,262,8,17,11,17,12,17,263,1,18,3,18,267,8,18,1,18,
        1,18,1,18,5,18,272,8,18,10,18,12,18,275,9,18,1,19,1,19,1,19,1,20,
        1,20,1,20,1,20,1,21,1,21,5,21,286,8,21,10,21,12,21,289,9,21,1,21,
        1,21,1,22,4,22,294,8,22,11,22,12,22,295,1,23,4,23,299,8,23,11,23,
        12,23,300,1,23,1,23,4,23,305,8,23,11,23,12,23,306,1,23,1,23,4,23,
        311,8,23,11,23,12,23,312,1,23,1,23,4,23,317,8,23,11,23,12,23,318,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,328,8,24,1,25,1,25,1,25,
        5,25,333,8,25,10,25,12,25,336,9,25,1,25,1,25,1,25,1,25,1,25,1,25,
        3,25,344,8,25,1,25,1,25,5,25,348,8,25,10,25,12,25,351,9,25,1,26,
        1,26,1,26,4,26,356,8,26,11,26,12,26,357,1,27,1,27,1,27,4,27,363,
        8,27,11,27,12,27,364,1,28,1,28,1,28,1,28,1,28,3,28,372,8,28,1,29,
        1,29,1,29,1,29,3,29,378,8,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,
        1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,5,35,398,
        8,35,10,35,12,35,401,9,35,1,35,3,35,404,8,35,1,35,1,35,1,35,1,35,
        1,36,4,36,411,8,36,11,36,12,36,412,1,36,1,36,1,37,1,37,1,37,1,37,
        1,37,1,38,3,38,423,8,38,1,38,1,38,2,287,399,0,39,1,1,3,2,5,3,7,4,
        9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,0,61,0,63,0,65,0,67,0,69,0,71,30,73,31,75,32,77,33,
        1,0,4,5,0,45,45,48,57,65,90,95,95,97,122,1,0,48,57,3,0,48,57,65,
        70,97,102,2,0,9,9,32,32,447,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,
        79,1,0,0,0,3,99,1,0,0,0,5,103,1,0,0,0,7,105,1,0,0,0,9,110,1,0,0,
        0,11,123,1,0,0,0,13,125,1,0,0,0,15,127,1,0,0,0,17,143,1,0,0,0,19,
        147,1,0,0,0,21,159,1,0,0,0,23,173,1,0,0,0,25,197,1,0,0,0,27,208,
        1,0,0,0,29,210,1,0,0,0,31,224,1,0,0,0,33,258,1,0,0,0,35,261,1,0,
        0,0,37,266,1,0,0,0,39,276,1,0,0,0,41,279,1,0,0,0,43,283,1,0,0,0,
        45,293,1,0,0,0,47,298,1,0,0,0,49,327,1,0,0,0,51,329,1,0,0,0,53,352,
        1,0,0,0,55,359,1,0,0,0,57,371,1,0,0,0,59,377,1,0,0,0,61,379,1,0,
        0,0,63,384,1,0,0,0,65,388,1,0,0,0,67,391,1,0,0,0,69,393,1,0,0,0,
        71,395,1,0,0,0,73,410,1,0,0,0,75,416,1,0,0,0,77,422,1,0,0,0,79,80,
        5,47,0,0,80,81,5,105,0,0,81,82,5,110,0,0,82,83,5,116,0,0,83,84,5,
        101,0,0,84,85,5,114,0,0,85,86,5,102,0,0,86,87,5,97,0,0,87,88,5,99,
        0,0,88,89,5,101,0,0,89,90,5,32,0,0,90,91,5,101,0,0,91,92,5,116,0,
        0,92,93,5,104,0,0,93,94,5,101,0,0,94,95,5,114,0,0,95,96,5,110,0,
        0,96,97,5,101,0,0,97,98,5,116,0,0,98,2,1,0,0,0,99,100,5,115,0,0,
        100,101,5,101,0,0,101,102,5,116,0,0,102,4,1,0,0,0,103,104,5,91,0,
        0,104,6,1,0,0,0,105,106,5,102,0,0,106,107,5,105,0,0,107,108,5,110,
        0,0,108,109,5,100,0,0,109,8,1,0,0,0,110,111,5,100,0,0,111,112,5,
        101,0,0,112,113,5,102,0,0,113,114,5,97,0,0,114,115,5,117,0,0,115,
        116,5,108,0,0,116,117,5,116,0,0,117,118,5,45,0,0,118,119,5,110,0,
        0,119,120,5,97,0,0,120,121,5,109,0,0,121,122,5,101,0,0,122,10,1,
        0,0,0,123,124,5,61,0,0,124,12,1,0,0,0,125,126,5,93,0,0,126,14,1,
        0,0,0,127,128,5,47,0,0,128,129,5,105,0,0,129,130,5,110,0,0,130,131,
        5,116,0,0,131,132,5,101,0,0,132,133,5,114,0,0,133,134,5,102,0,0,
        134,135,5,97,0,0,135,136,5,99,0,0,136,137,5,101,0,0,137,138,5,32,
        0,0,138,139,5,118,0,0,139,140,5,108,0,0,140,141,5,97,0,0,141,142,
        5,110,0,0,142,16,1,0,0,0,143,144,5,97,0,0,144,145,5,100,0,0,145,
        146,5,100,0,0,146,18,1,0,0,0,147,148,5,47,0,0,148,149,5,105,0,0,
        149,150,5,112,0,0,150,151,5,32,0,0,151,152,5,97,0,0,152,153,5,100,
        0,0,153,154,5,100,0,0,154,155,5,114,0,0,155,156,5,101,0,0,156,157,
        5,115,0,0,157,158,5,115,0,0,158,20,1,0,0,0,159,160,5,47,0,0,160,
        161,5,105,0,0,161,162,5,112,0,0,162,163,5,118,0,0,163,164,5,54,0,
        0,164,165,5,32,0,0,165,166,5,97,0,0,166,167,5,100,0,0,167,168,5,
        100,0,0,168,169,5,114,0,0,169,170,5,101,0,0,170,171,5,115,0,0,171,
        172,5,115,0,0,172,22,1,0,0,0,173,174,5,47,0,0,174,175,5,114,0,0,
        175,176,5,111,0,0,176,177,5,117,0,0,177,178,5,116,0,0,178,179,5,
        105,0,0,179,180,5,110,0,0,180,181,5,103,0,0,181,182,5,32,0,0,182,
        183,5,98,0,0,183,184,5,103,0,0,184,185,5,112,0,0,185,186,5,32,0,
        0,186,187,5,99,0,0,187,188,5,111,0,0,188,189,5,110,0,0,189,190,5,
        110,0,0,190,191,5,101,0,0,191,192,5,99,0,0,192,193,5,116,0,0,193,
        194,5,105,0,0,194,195,5,111,0,0,195,196,5,110,0,0,196,24,1,0,0,0,
        197,198,5,47,0,0,198,199,5,105,0,0,199,200,5,110,0,0,200,201,5,116,
        0,0,201,202,5,101,0,0,202,203,5,114,0,0,203,204,5,102,0,0,204,205,
        5,97,0,0,205,206,5,99,0,0,206,207,5,101,0,0,207,26,1,0,0,0,208,209,
        5,47,0,0,209,28,1,0,0,0,210,211,5,108,0,0,211,212,5,111,0,0,212,
        213,5,99,0,0,213,214,5,97,0,0,214,215,5,108,0,0,215,216,5,46,0,0,
        216,217,5,97,0,0,217,218,5,100,0,0,218,219,5,100,0,0,219,220,5,114,
        0,0,220,221,5,101,0,0,221,222,5,115,0,0,222,223,5,115,0,0,223,30,
        1,0,0,0,224,225,5,44,0,0,225,32,1,0,0,0,226,227,5,101,0,0,227,228,
        5,116,0,0,228,229,5,104,0,0,229,230,5,101,0,0,230,231,5,114,0,0,
        231,232,1,0,0,0,232,259,3,45,22,0,233,234,5,115,0,0,234,235,5,102,
        0,0,235,236,5,112,0,0,236,237,1,0,0,0,237,242,3,45,22,0,238,239,
        5,45,0,0,239,241,3,45,22,0,240,238,1,0,0,0,241,244,1,0,0,0,242,240,
        1,0,0,0,242,243,1,0,0,0,243,259,1,0,0,0,244,242,1,0,0,0,245,246,
        5,113,0,0,246,247,5,115,0,0,247,248,5,102,0,0,248,249,5,112,0,0,
        249,250,1,0,0,0,250,255,3,45,22,0,251,252,5,45,0,0,252,254,3,45,
        22,0,253,251,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,
        0,0,256,259,1,0,0,0,257,255,1,0,0,0,258,226,1,0,0,0,258,233,1,0,
        0,0,258,245,1,0,0,0,259,34,1,0,0,0,260,262,7,0,0,0,261,260,1,0,0,
        0,262,263,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,36,1,0,0,0,
        265,267,5,46,0,0,266,265,1,0,0,0,266,267,1,0,0,0,267,268,1,0,0,0,
        268,273,3,35,17,0,269,272,2,45,47,0,270,272,3,35,17,0,271,269,1,
        0,0,0,271,270,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,
        0,0,0,274,38,1,0,0,0,275,273,1,0,0,0,276,277,5,46,0,0,277,278,3,
        35,17,0,278,40,1,0,0,0,279,280,3,35,17,0,280,281,5,46,0,0,281,282,
        3,35,17,0,282,42,1,0,0,0,283,287,5,34,0,0,284,286,9,0,0,0,285,284,
        1,0,0,0,286,289,1,0,0,0,287,288,1,0,0,0,287,285,1,0,0,0,288,290,
        1,0,0,0,289,287,1,0,0,0,290,291,5,34,0,0,291,44,1,0,0,0,292,294,
        7,1,0,0,293,292,1,0,0,0,294,295,1,0,0,0,295,293,1,0,0,0,295,296,
        1,0,0,0,296,46,1,0,0,0,297,299,7,1,0,0,298,297,1,0,0,0,299,300,1,
        0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,304,5,
        46,0,0,303,305,7,1,0,0,304,303,1,0,0,0,305,306,1,0,0,0,306,304,1,
        0,0,0,306,307,1,0,0,0,307,308,1,0,0,0,308,310,5,46,0,0,309,311,7,
        1,0,0,310,309,1,0,0,0,311,312,1,0,0,0,312,310,1,0,0,0,312,313,1,
        0,0,0,313,314,1,0,0,0,314,316,5,46,0,0,315,317,7,1,0,0,316,315,1,
        0,0,0,317,318,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,48,1,0,
        0,0,320,321,3,59,29,0,321,322,5,58,0,0,322,323,3,59,29,0,323,324,
        1,0,0,0,324,325,6,24,0,0,325,328,1,0,0,0,326,328,3,51,25,0,327,320,
        1,0,0,0,327,326,1,0,0,0,328,50,1,0,0,0,329,334,3,59,29,0,330,331,
        5,58,0,0,331,333,3,59,29,0,332,330,1,0,0,0,333,336,1,0,0,0,334,332,
        1,0,0,0,334,335,1,0,0,0,335,343,1,0,0,0,336,334,1,0,0,0,337,338,
        5,58,0,0,338,339,5,58,0,0,339,340,1,0,0,0,340,344,3,59,29,0,341,
        342,5,58,0,0,342,344,5,58,0,0,343,337,1,0,0,0,343,341,1,0,0,0,344,
        349,1,0,0,0,345,346,5,58,0,0,346,348,3,59,29,0,347,345,1,0,0,0,348,
        351,1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,52,1,0,0,0,351,349,
        1,0,0,0,352,353,3,47,23,0,353,355,5,47,0,0,354,356,7,1,0,0,355,354,
        1,0,0,0,356,357,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,54,1,
        0,0,0,359,360,3,49,24,0,360,362,5,47,0,0,361,363,7,1,0,0,362,361,
        1,0,0,0,363,364,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,56,1,
        0,0,0,366,367,5,121,0,0,367,368,5,101,0,0,368,372,5,115,0,0,369,
        370,5,110,0,0,370,372,5,111,0,0,371,366,1,0,0,0,371,369,1,0,0,0,
        372,58,1,0,0,0,373,378,3,61,30,0,374,378,3,63,31,0,375,378,3,65,
        32,0,376,378,3,67,33,0,377,373,1,0,0,0,377,374,1,0,0,0,377,375,1,
        0,0,0,377,376,1,0,0,0,378,60,1,0,0,0,379,380,3,69,34,0,380,381,3,
        69,34,0,381,382,3,69,34,0,382,383,3,69,34,0,383,62,1,0,0,0,384,385,
        3,69,34,0,385,386,3,69,34,0,386,387,3,69,34,0,387,64,1,0,0,0,388,
        389,3,69,34,0,389,390,3,69,34,0,390,66,1,0,0,0,391,392,3,69,34,0,
        392,68,1,0,0,0,393,394,7,2,0,0,394,70,1,0,0,0,395,399,5,35,0,0,396,
        398,9,0,0,0,397,396,1,0,0,0,398,401,1,0,0,0,399,400,1,0,0,0,399,
        397,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,402,404,5,13,0,0,403,
        402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,406,5,10,0,0,406,
        407,1,0,0,0,407,408,6,35,1,0,408,72,1,0,0,0,409,411,7,3,0,0,410,
        409,1,0,0,0,411,412,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,413,
        414,1,0,0,0,414,415,6,36,1,0,415,74,1,0,0,0,416,417,5,92,0,0,417,
        418,3,77,38,0,418,419,1,0,0,0,419,420,6,37,1,0,420,76,1,0,0,0,421,
        423,5,13,0,0,422,421,1,0,0,0,422,423,1,0,0,0,423,424,1,0,0,0,424,
        425,5,10,0,0,425,78,1,0,0,0,26,0,242,255,258,263,266,271,273,287,
        295,300,306,312,318,327,334,343,349,357,364,371,377,399,403,412,
        422,2,1,24,0,6,0,0
    ]

class RouterosLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    INTERFACE_NAME = 17
    WORD = 18
    COMPLEX_WORD = 19
    COMPLEX_WORD2 = 20
    COMPLEX_WORD3 = 21
    STRING = 22
    NUMBER = 23
    IP_ADDRESS = 24
    IPV6_ADDRESS = 25
    IPV6_SHORTHAND = 26
    NETWORK = 27
    IPV6_NETWORK = 28
    BOOLEAN = 29
    COMMENT = 30
    WS = 31
    CONTINUED_LINE = 32
    NEWLINE = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'/interface ethernet'", "'set'", "'['", "'find'", "'default-name'", 
            "'='", "']'", "'/interface vlan'", "'add'", "'/ip address'", 
            "'/ipv6 address'", "'/routing bgp connection'", "'/interface'", 
            "'/'", "'local.address'", "','" ]

    symbolicNames = [ "<INVALID>",
            "INTERFACE_NAME", "WORD", "COMPLEX_WORD", "COMPLEX_WORD2", "COMPLEX_WORD3", 
            "STRING", "NUMBER", "IP_ADDRESS", "IPV6_ADDRESS", "IPV6_SHORTHAND", 
            "NETWORK", "IPV6_NETWORK", "BOOLEAN", "COMMENT", "WS", "CONTINUED_LINE", 
            "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "INTERFACE_NAME", "WORD", "COMPLEX_WORD", 
                  "COMPLEX_WORD2", "COMPLEX_WORD3", "STRING", "NUMBER", 
                  "IP_ADDRESS", "IPV6_ADDRESS", "IPV6_SHORTHAND", "NETWORK", 
                  "IPV6_NETWORK", "BOOLEAN", "HEX_QUAD", "HEX_4", "HEX_3", 
                  "HEX_2", "HEX_1", "HEX_DIGIT", "COMMENT", "WS", "CONTINUED_LINE", 
                  "NEWLINE" ]

    grammarFileName = "Routeros.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[24] = self.IPV6_ADDRESS_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def IPV6_ADDRESS_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            7
     


