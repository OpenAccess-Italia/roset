# Generated from IosXr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,364,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,5,12,205,
        8,12,10,12,12,12,208,9,12,1,13,1,13,5,13,212,8,13,10,13,12,13,215,
        9,13,1,13,3,13,218,8,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,14,3,14,230,8,14,1,14,1,14,1,14,1,14,1,15,3,15,237,8,15,1,
        15,1,15,1,15,5,15,242,8,15,10,15,12,15,245,9,15,1,16,1,16,1,16,1,
        17,1,17,1,17,1,17,1,18,1,18,5,18,256,8,18,10,18,12,18,259,9,18,1,
        18,1,18,1,19,4,19,264,8,19,11,19,12,19,265,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,21,1,21,1,21,5,21,279,8,21,10,21,12,21,282,9,
        21,1,21,3,21,285,8,21,1,22,1,22,1,22,5,22,290,8,22,10,22,12,22,293,
        9,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,301,8,22,1,22,1,22,5,22,
        305,8,22,10,22,12,22,308,9,22,1,22,1,22,3,22,312,8,22,1,23,1,23,
        1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,25,327,
        8,25,1,26,1,26,3,26,331,8,26,1,26,3,26,334,8,26,1,26,3,26,337,8,
        26,1,27,1,27,1,28,4,28,342,8,28,11,28,12,28,343,1,28,1,28,1,29,1,
        29,1,29,1,29,1,29,1,30,3,30,354,8,30,1,30,1,30,1,31,1,31,5,31,360,
        8,31,10,31,12,31,363,9,31,2,213,257,0,32,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,1,0,7,5,0,42,42,45,57,65,90,95,95,97,122,
        2,0,33,33,35,35,1,0,48,57,3,0,48,57,65,70,97,102,2,0,9,9,32,32,2,
        0,65,90,97,122,5,0,45,45,48,57,65,90,95,95,97,122,385,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,1,65,1,0,0,0,3,75,1,0,0,0,5,88,1,0,0,0,7,101,1,0,0,0,
        9,114,1,0,0,0,11,134,1,0,0,0,13,147,1,0,0,0,15,156,1,0,0,0,17,167,
        1,0,0,0,19,176,1,0,0,0,21,186,1,0,0,0,23,200,1,0,0,0,25,202,1,0,
        0,0,27,209,1,0,0,0,29,229,1,0,0,0,31,236,1,0,0,0,33,246,1,0,0,0,
        35,249,1,0,0,0,37,253,1,0,0,0,39,263,1,0,0,0,41,267,1,0,0,0,43,284,
        1,0,0,0,45,311,1,0,0,0,47,313,1,0,0,0,49,317,1,0,0,0,51,326,1,0,
        0,0,53,328,1,0,0,0,55,338,1,0,0,0,57,341,1,0,0,0,59,347,1,0,0,0,
        61,353,1,0,0,0,63,357,1,0,0,0,65,66,5,105,0,0,66,67,5,110,0,0,67,
        68,5,116,0,0,68,69,5,101,0,0,69,70,5,114,0,0,70,71,5,102,0,0,71,
        72,5,97,0,0,72,73,5,99,0,0,73,74,5,101,0,0,74,2,1,0,0,0,75,76,5,
        112,0,0,76,77,5,114,0,0,77,78,5,101,0,0,78,79,5,99,0,0,79,80,5,111,
        0,0,80,81,5,110,0,0,81,82,5,102,0,0,82,83,5,105,0,0,83,84,5,103,
        0,0,84,85,5,117,0,0,85,86,5,114,0,0,86,87,5,101,0,0,87,4,1,0,0,0,
        88,89,5,105,0,0,89,90,5,112,0,0,90,91,5,118,0,0,91,92,5,52,0,0,92,
        93,5,32,0,0,93,94,5,97,0,0,94,95,5,100,0,0,95,96,5,100,0,0,96,97,
        5,114,0,0,97,98,5,101,0,0,98,99,5,115,0,0,99,100,5,115,0,0,100,6,
        1,0,0,0,101,102,5,105,0,0,102,103,5,112,0,0,103,104,5,118,0,0,104,
        105,5,54,0,0,105,106,5,32,0,0,106,107,5,97,0,0,107,108,5,100,0,0,
        108,109,5,100,0,0,109,110,5,114,0,0,110,111,5,101,0,0,111,112,5,
        115,0,0,112,113,5,115,0,0,113,8,1,0,0,0,114,115,5,101,0,0,115,116,
        5,110,0,0,116,117,5,99,0,0,117,118,5,97,0,0,118,119,5,112,0,0,119,
        120,5,115,0,0,120,121,5,117,0,0,121,122,5,108,0,0,122,123,5,97,0,
        0,123,124,5,116,0,0,124,125,5,105,0,0,125,126,5,111,0,0,126,127,
        5,110,0,0,127,128,5,32,0,0,128,129,5,100,0,0,129,130,5,111,0,0,130,
        131,5,116,0,0,131,132,5,49,0,0,132,133,5,113,0,0,133,10,1,0,0,0,
        134,135,5,115,0,0,135,136,5,101,0,0,136,137,5,99,0,0,137,138,5,111,
        0,0,138,139,5,110,0,0,139,140,5,100,0,0,140,141,5,45,0,0,141,142,
        5,100,0,0,142,143,5,111,0,0,143,144,5,116,0,0,144,145,5,49,0,0,145,
        146,5,113,0,0,146,12,1,0,0,0,147,148,5,115,0,0,148,149,5,104,0,0,
        149,150,5,117,0,0,150,151,5,116,0,0,151,152,5,100,0,0,152,153,5,
        111,0,0,153,154,5,119,0,0,154,155,5,110,0,0,155,14,1,0,0,0,156,157,
        5,114,0,0,157,158,5,111,0,0,158,159,5,117,0,0,159,160,5,116,0,0,
        160,161,5,101,0,0,161,162,5,114,0,0,162,163,5,32,0,0,163,164,5,98,
        0,0,164,165,5,103,0,0,165,166,5,112,0,0,166,16,1,0,0,0,167,168,5,
        110,0,0,168,169,5,101,0,0,169,170,5,105,0,0,170,171,5,103,0,0,171,
        172,5,104,0,0,172,173,5,98,0,0,173,174,5,111,0,0,174,175,5,114,0,
        0,175,18,1,0,0,0,176,177,5,114,0,0,177,178,5,101,0,0,178,179,5,109,
        0,0,179,180,5,111,0,0,180,181,5,116,0,0,181,182,5,101,0,0,182,183,
        5,45,0,0,183,184,5,97,0,0,184,185,5,115,0,0,185,20,1,0,0,0,186,187,
        5,117,0,0,187,188,5,112,0,0,188,189,5,100,0,0,189,190,5,97,0,0,190,
        191,5,116,0,0,191,192,5,101,0,0,192,193,5,45,0,0,193,194,5,115,0,
        0,194,195,5,111,0,0,195,196,5,117,0,0,196,197,5,114,0,0,197,198,
        5,99,0,0,198,199,5,101,0,0,199,22,1,0,0,0,200,201,5,44,0,0,201,24,
        1,0,0,0,202,206,7,0,0,0,203,205,7,0,0,0,204,203,1,0,0,0,205,208,
        1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,26,1,0,0,0,208,206,1,
        0,0,0,209,213,7,1,0,0,210,212,9,0,0,0,211,210,1,0,0,0,212,215,1,
        0,0,0,213,214,1,0,0,0,213,211,1,0,0,0,214,217,1,0,0,0,215,213,1,
        0,0,0,216,218,5,13,0,0,217,216,1,0,0,0,217,218,1,0,0,0,218,219,1,
        0,0,0,219,220,5,10,0,0,220,221,1,0,0,0,221,222,6,13,0,0,222,28,1,
        0,0,0,223,224,5,48,0,0,224,225,5,120,0,0,225,226,1,0,0,0,226,227,
        3,39,19,0,227,228,5,58,0,0,228,230,1,0,0,0,229,223,1,0,0,0,229,230,
        1,0,0,0,230,231,1,0,0,0,231,232,3,39,19,0,232,233,5,58,0,0,233,234,
        3,39,19,0,234,30,1,0,0,0,235,237,5,46,0,0,236,235,1,0,0,0,236,237,
        1,0,0,0,237,238,1,0,0,0,238,243,3,25,12,0,239,242,2,43,47,0,240,
        242,3,25,12,0,241,239,1,0,0,0,241,240,1,0,0,0,242,245,1,0,0,0,243,
        241,1,0,0,0,243,244,1,0,0,0,244,32,1,0,0,0,245,243,1,0,0,0,246,247,
        5,46,0,0,247,248,3,25,12,0,248,34,1,0,0,0,249,250,3,25,12,0,250,
        251,2,45,46,0,251,252,3,25,12,0,252,36,1,0,0,0,253,257,5,34,0,0,
        254,256,9,0,0,0,255,254,1,0,0,0,256,259,1,0,0,0,257,258,1,0,0,0,
        257,255,1,0,0,0,258,260,1,0,0,0,259,257,1,0,0,0,260,261,5,34,0,0,
        261,38,1,0,0,0,262,264,7,2,0,0,263,262,1,0,0,0,264,265,1,0,0,0,265,
        263,1,0,0,0,265,266,1,0,0,0,266,40,1,0,0,0,267,268,3,39,19,0,268,
        269,5,46,0,0,269,270,3,39,19,0,270,271,5,46,0,0,271,272,3,39,19,
        0,272,273,5,46,0,0,273,274,3,39,19,0,274,42,1,0,0,0,275,280,3,53,
        26,0,276,277,5,58,0,0,277,279,3,53,26,0,278,276,1,0,0,0,279,282,
        1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,285,1,0,0,0,282,280,
        1,0,0,0,283,285,3,45,22,0,284,275,1,0,0,0,284,283,1,0,0,0,285,44,
        1,0,0,0,286,291,3,53,26,0,287,288,5,58,0,0,288,290,3,53,26,0,289,
        287,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,
        300,1,0,0,0,293,291,1,0,0,0,294,295,5,58,0,0,295,296,5,58,0,0,296,
        297,1,0,0,0,297,301,3,53,26,0,298,299,5,58,0,0,299,301,5,58,0,0,
        300,294,1,0,0,0,300,298,1,0,0,0,301,306,1,0,0,0,302,303,5,58,0,0,
        303,305,3,53,26,0,304,302,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,
        0,306,307,1,0,0,0,307,312,1,0,0,0,308,306,1,0,0,0,309,310,5,58,0,
        0,310,312,5,58,0,0,311,286,1,0,0,0,311,309,1,0,0,0,312,46,1,0,0,
        0,313,314,3,41,20,0,314,315,5,47,0,0,315,316,3,39,19,0,316,48,1,
        0,0,0,317,318,3,43,21,0,318,319,5,47,0,0,319,320,3,39,19,0,320,50,
        1,0,0,0,321,322,5,121,0,0,322,323,5,101,0,0,323,327,5,115,0,0,324,
        325,5,110,0,0,325,327,5,111,0,0,326,321,1,0,0,0,326,324,1,0,0,0,
        327,52,1,0,0,0,328,330,3,55,27,0,329,331,3,55,27,0,330,329,1,0,0,
        0,330,331,1,0,0,0,331,333,1,0,0,0,332,334,3,55,27,0,333,332,1,0,
        0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,337,3,55,27,0,336,335,1,
        0,0,0,336,337,1,0,0,0,337,54,1,0,0,0,338,339,7,3,0,0,339,56,1,0,
        0,0,340,342,7,4,0,0,341,340,1,0,0,0,342,343,1,0,0,0,343,341,1,0,
        0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,346,6,28,0,0,346,58,1,0,
        0,0,347,348,5,92,0,0,348,349,3,61,30,0,349,350,1,0,0,0,350,351,6,
        29,0,0,351,60,1,0,0,0,352,354,5,13,0,0,353,352,1,0,0,0,353,354,1,
        0,0,0,354,355,1,0,0,0,355,356,5,10,0,0,356,62,1,0,0,0,357,361,7,
        5,0,0,358,360,7,6,0,0,359,358,1,0,0,0,360,363,1,0,0,0,361,359,1,
        0,0,0,361,362,1,0,0,0,362,64,1,0,0,0,363,361,1,0,0,0,23,0,206,213,
        217,229,236,241,243,257,265,280,284,291,300,306,311,326,330,333,
        336,343,353,361,1,6,0,0
    ]

class IosXrLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    WORD = 13
    COMMENT = 14
    COMMUNITY = 15
    COMPLEX_WORD = 16
    COMPLEX_WORD2 = 17
    COMPLEX_WORD3 = 18
    STRING = 19
    NUMBER = 20
    IPV4_ADDRESS = 21
    IPV6_ADDRESS = 22
    IPV6_SHORTHAND = 23
    IPV4_NETWORK = 24
    IPV6_NETWORK = 25
    BOOLEAN = 26
    HEX_QUAD = 27
    HEX_DIGIT = 28
    WS = 29
    CONTINUED_LINE = 30
    NEWLINE = 31
    ID = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'interface'", "'preconfigure'", "'ipv4 address'", "'ipv6 address'", 
            "'encapsulation dot1q'", "'second-dot1q'", "'shutdown'", "'router bgp'", 
            "'neighbor'", "'remote-as'", "'update-source'", "','" ]

    symbolicNames = [ "<INVALID>",
            "WORD", "COMMENT", "COMMUNITY", "COMPLEX_WORD", "COMPLEX_WORD2", 
            "COMPLEX_WORD3", "STRING", "NUMBER", "IPV4_ADDRESS", "IPV6_ADDRESS", 
            "IPV6_SHORTHAND", "IPV4_NETWORK", "IPV6_NETWORK", "BOOLEAN", 
            "HEX_QUAD", "HEX_DIGIT", "WS", "CONTINUED_LINE", "NEWLINE", 
            "ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "WORD", "COMMENT", 
                  "COMMUNITY", "COMPLEX_WORD", "COMPLEX_WORD2", "COMPLEX_WORD3", 
                  "STRING", "NUMBER", "IPV4_ADDRESS", "IPV6_ADDRESS", "IPV6_SHORTHAND", 
                  "IPV4_NETWORK", "IPV6_NETWORK", "BOOLEAN", "HEX_QUAD", 
                  "HEX_DIGIT", "WS", "CONTINUED_LINE", "NEWLINE", "ID" ]

    grammarFileName = "IosXr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


