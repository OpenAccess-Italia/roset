# Generated from Routeros.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,364,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,211,
        8,15,1,15,1,15,1,15,1,15,1,16,4,16,218,8,16,11,16,12,16,219,1,17,
        3,17,223,8,17,1,17,1,17,1,17,5,17,228,8,17,10,17,12,17,231,9,17,
        1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,5,20,242,8,20,10,20,
        12,20,245,9,20,1,20,1,20,1,21,4,21,250,8,21,11,21,12,21,251,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,5,23,265,8,23,
        10,23,12,23,268,9,23,1,23,3,23,271,8,23,1,24,1,24,1,24,5,24,276,
        8,24,10,24,12,24,279,9,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,287,
        8,24,1,24,1,24,5,24,291,8,24,10,24,12,24,294,9,24,1,24,1,24,3,24,
        298,8,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
        1,27,1,27,3,27,313,8,27,1,28,1,28,3,28,317,8,28,1,28,3,28,320,8,
        28,1,28,3,28,323,8,28,1,29,1,29,1,30,1,30,5,30,329,8,30,10,30,12,
        30,332,9,30,1,30,3,30,335,8,30,1,30,1,30,1,30,1,30,1,31,4,31,342,
        8,31,11,31,12,31,343,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,3,33,
        354,8,33,1,33,1,33,1,34,1,34,5,34,360,8,34,10,34,12,34,363,9,34,
        2,243,330,0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,1,0,6,6,0,42,42,45,45,48,57,65,90,95,95,97,122,1,
        0,48,57,3,0,48,57,65,70,97,102,2,0,9,9,32,32,2,0,65,90,97,122,5,
        0,45,45,48,57,65,90,95,95,97,122,385,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,71,1,0,0,0,3,91,1,0,0,0,5,95,1,
        0,0,0,7,97,1,0,0,0,9,102,1,0,0,0,11,115,1,0,0,0,13,117,1,0,0,0,15,
        119,1,0,0,0,17,135,1,0,0,0,19,139,1,0,0,0,21,151,1,0,0,0,23,165,
        1,0,0,0,25,189,1,0,0,0,27,200,1,0,0,0,29,202,1,0,0,0,31,210,1,0,
        0,0,33,217,1,0,0,0,35,222,1,0,0,0,37,232,1,0,0,0,39,235,1,0,0,0,
        41,239,1,0,0,0,43,249,1,0,0,0,45,253,1,0,0,0,47,270,1,0,0,0,49,297,
        1,0,0,0,51,299,1,0,0,0,53,303,1,0,0,0,55,312,1,0,0,0,57,314,1,0,
        0,0,59,324,1,0,0,0,61,326,1,0,0,0,63,341,1,0,0,0,65,347,1,0,0,0,
        67,353,1,0,0,0,69,357,1,0,0,0,71,72,5,47,0,0,72,73,5,105,0,0,73,
        74,5,110,0,0,74,75,5,116,0,0,75,76,5,101,0,0,76,77,5,114,0,0,77,
        78,5,102,0,0,78,79,5,97,0,0,79,80,5,99,0,0,80,81,5,101,0,0,81,82,
        5,32,0,0,82,83,5,101,0,0,83,84,5,116,0,0,84,85,5,104,0,0,85,86,5,
        101,0,0,86,87,5,114,0,0,87,88,5,110,0,0,88,89,5,101,0,0,89,90,5,
        116,0,0,90,2,1,0,0,0,91,92,5,115,0,0,92,93,5,101,0,0,93,94,5,116,
        0,0,94,4,1,0,0,0,95,96,5,91,0,0,96,6,1,0,0,0,97,98,5,102,0,0,98,
        99,5,105,0,0,99,100,5,110,0,0,100,101,5,100,0,0,101,8,1,0,0,0,102,
        103,5,100,0,0,103,104,5,101,0,0,104,105,5,102,0,0,105,106,5,97,0,
        0,106,107,5,117,0,0,107,108,5,108,0,0,108,109,5,116,0,0,109,110,
        5,45,0,0,110,111,5,110,0,0,111,112,5,97,0,0,112,113,5,109,0,0,113,
        114,5,101,0,0,114,10,1,0,0,0,115,116,5,61,0,0,116,12,1,0,0,0,117,
        118,5,93,0,0,118,14,1,0,0,0,119,120,5,47,0,0,120,121,5,105,0,0,121,
        122,5,110,0,0,122,123,5,116,0,0,123,124,5,101,0,0,124,125,5,114,
        0,0,125,126,5,102,0,0,126,127,5,97,0,0,127,128,5,99,0,0,128,129,
        5,101,0,0,129,130,5,32,0,0,130,131,5,118,0,0,131,132,5,108,0,0,132,
        133,5,97,0,0,133,134,5,110,0,0,134,16,1,0,0,0,135,136,5,97,0,0,136,
        137,5,100,0,0,137,138,5,100,0,0,138,18,1,0,0,0,139,140,5,47,0,0,
        140,141,5,105,0,0,141,142,5,112,0,0,142,143,5,32,0,0,143,144,5,97,
        0,0,144,145,5,100,0,0,145,146,5,100,0,0,146,147,5,114,0,0,147,148,
        5,101,0,0,148,149,5,115,0,0,149,150,5,115,0,0,150,20,1,0,0,0,151,
        152,5,47,0,0,152,153,5,105,0,0,153,154,5,112,0,0,154,155,5,118,0,
        0,155,156,5,54,0,0,156,157,5,32,0,0,157,158,5,97,0,0,158,159,5,100,
        0,0,159,160,5,100,0,0,160,161,5,114,0,0,161,162,5,101,0,0,162,163,
        5,115,0,0,163,164,5,115,0,0,164,22,1,0,0,0,165,166,5,47,0,0,166,
        167,5,114,0,0,167,168,5,111,0,0,168,169,5,117,0,0,169,170,5,116,
        0,0,170,171,5,105,0,0,171,172,5,110,0,0,172,173,5,103,0,0,173,174,
        5,32,0,0,174,175,5,98,0,0,175,176,5,103,0,0,176,177,5,112,0,0,177,
        178,5,32,0,0,178,179,5,99,0,0,179,180,5,111,0,0,180,181,5,110,0,
        0,181,182,5,110,0,0,182,183,5,101,0,0,183,184,5,99,0,0,184,185,5,
        116,0,0,185,186,5,105,0,0,186,187,5,111,0,0,187,188,5,110,0,0,188,
        24,1,0,0,0,189,190,5,47,0,0,190,191,5,105,0,0,191,192,5,110,0,0,
        192,193,5,116,0,0,193,194,5,101,0,0,194,195,5,114,0,0,195,196,5,
        102,0,0,196,197,5,97,0,0,197,198,5,99,0,0,198,199,5,101,0,0,199,
        26,1,0,0,0,200,201,5,47,0,0,201,28,1,0,0,0,202,203,5,44,0,0,203,
        30,1,0,0,0,204,205,5,48,0,0,205,206,5,120,0,0,206,207,1,0,0,0,207,
        208,3,43,21,0,208,209,5,58,0,0,209,211,1,0,0,0,210,204,1,0,0,0,210,
        211,1,0,0,0,211,212,1,0,0,0,212,213,3,43,21,0,213,214,5,58,0,0,214,
        215,3,43,21,0,215,32,1,0,0,0,216,218,7,0,0,0,217,216,1,0,0,0,218,
        219,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,34,1,0,0,0,221,223,
        5,46,0,0,222,221,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,229,
        3,33,16,0,225,228,2,43,47,0,226,228,3,33,16,0,227,225,1,0,0,0,227,
        226,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,
        36,1,0,0,0,231,229,1,0,0,0,232,233,5,46,0,0,233,234,3,33,16,0,234,
        38,1,0,0,0,235,236,3,33,16,0,236,237,2,45,46,0,237,238,3,33,16,0,
        238,40,1,0,0,0,239,243,5,34,0,0,240,242,9,0,0,0,241,240,1,0,0,0,
        242,245,1,0,0,0,243,244,1,0,0,0,243,241,1,0,0,0,244,246,1,0,0,0,
        245,243,1,0,0,0,246,247,5,34,0,0,247,42,1,0,0,0,248,250,7,1,0,0,
        249,248,1,0,0,0,250,251,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,
        252,44,1,0,0,0,253,254,3,43,21,0,254,255,5,46,0,0,255,256,3,43,21,
        0,256,257,5,46,0,0,257,258,3,43,21,0,258,259,5,46,0,0,259,260,3,
        43,21,0,260,46,1,0,0,0,261,266,3,57,28,0,262,263,5,58,0,0,263,265,
        3,57,28,0,264,262,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,
        1,0,0,0,267,271,1,0,0,0,268,266,1,0,0,0,269,271,3,49,24,0,270,261,
        1,0,0,0,270,269,1,0,0,0,271,48,1,0,0,0,272,277,3,57,28,0,273,274,
        5,58,0,0,274,276,3,57,28,0,275,273,1,0,0,0,276,279,1,0,0,0,277,275,
        1,0,0,0,277,278,1,0,0,0,278,286,1,0,0,0,279,277,1,0,0,0,280,281,
        5,58,0,0,281,282,5,58,0,0,282,283,1,0,0,0,283,287,3,57,28,0,284,
        285,5,58,0,0,285,287,5,58,0,0,286,280,1,0,0,0,286,284,1,0,0,0,287,
        292,1,0,0,0,288,289,5,58,0,0,289,291,3,57,28,0,290,288,1,0,0,0,291,
        294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,298,1,0,0,0,294,
        292,1,0,0,0,295,296,5,58,0,0,296,298,5,58,0,0,297,272,1,0,0,0,297,
        295,1,0,0,0,298,50,1,0,0,0,299,300,3,45,22,0,300,301,5,47,0,0,301,
        302,3,43,21,0,302,52,1,0,0,0,303,304,3,47,23,0,304,305,5,47,0,0,
        305,306,3,43,21,0,306,54,1,0,0,0,307,308,5,121,0,0,308,309,5,101,
        0,0,309,313,5,115,0,0,310,311,5,110,0,0,311,313,5,111,0,0,312,307,
        1,0,0,0,312,310,1,0,0,0,313,56,1,0,0,0,314,316,3,59,29,0,315,317,
        3,59,29,0,316,315,1,0,0,0,316,317,1,0,0,0,317,319,1,0,0,0,318,320,
        3,59,29,0,319,318,1,0,0,0,319,320,1,0,0,0,320,322,1,0,0,0,321,323,
        3,59,29,0,322,321,1,0,0,0,322,323,1,0,0,0,323,58,1,0,0,0,324,325,
        7,2,0,0,325,60,1,0,0,0,326,330,5,35,0,0,327,329,9,0,0,0,328,327,
        1,0,0,0,329,332,1,0,0,0,330,331,1,0,0,0,330,328,1,0,0,0,331,334,
        1,0,0,0,332,330,1,0,0,0,333,335,5,13,0,0,334,333,1,0,0,0,334,335,
        1,0,0,0,335,336,1,0,0,0,336,337,5,10,0,0,337,338,1,0,0,0,338,339,
        6,30,0,0,339,62,1,0,0,0,340,342,7,3,0,0,341,340,1,0,0,0,342,343,
        1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,346,
        6,31,0,0,346,64,1,0,0,0,347,348,5,92,0,0,348,349,3,67,33,0,349,350,
        1,0,0,0,350,351,6,32,0,0,351,66,1,0,0,0,352,354,5,13,0,0,353,352,
        1,0,0,0,353,354,1,0,0,0,354,355,1,0,0,0,355,356,5,10,0,0,356,68,
        1,0,0,0,357,361,7,4,0,0,358,360,7,5,0,0,359,358,1,0,0,0,360,363,
        1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,70,1,0,0,0,363,361,1,
        0,0,0,23,0,210,219,222,227,229,243,251,266,270,277,286,292,297,312,
        316,319,322,330,334,343,353,361,1,6,0,0
    ]

class RouterosLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    COMMUNITY = 16
    WORD = 17
    COMPLEX_WORD = 18
    COMPLEX_WORD2 = 19
    COMPLEX_WORD3 = 20
    STRING = 21
    NUMBER = 22
    IPV4_ADDRESS = 23
    IPV6_ADDRESS = 24
    IPV6_SHORTHAND = 25
    IPV4_NETWORK = 26
    IPV6_NETWORK = 27
    BOOLEAN = 28
    HEX_QUAD = 29
    HEX_DIGIT = 30
    COMMENT = 31
    WS = 32
    CONTINUED_LINE = 33
    NEWLINE = 34
    ID = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'/interface ethernet'", "'set'", "'['", "'find'", "'default-name'", 
            "'='", "']'", "'/interface vlan'", "'add'", "'/ip address'", 
            "'/ipv6 address'", "'/routing bgp connection'", "'/interface'", 
            "'/'", "','" ]

    symbolicNames = [ "<INVALID>",
            "COMMUNITY", "WORD", "COMPLEX_WORD", "COMPLEX_WORD2", "COMPLEX_WORD3", 
            "STRING", "NUMBER", "IPV4_ADDRESS", "IPV6_ADDRESS", "IPV6_SHORTHAND", 
            "IPV4_NETWORK", "IPV6_NETWORK", "BOOLEAN", "HEX_QUAD", "HEX_DIGIT", 
            "COMMENT", "WS", "CONTINUED_LINE", "NEWLINE", "ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "COMMUNITY", "WORD", "COMPLEX_WORD", "COMPLEX_WORD2", 
                  "COMPLEX_WORD3", "STRING", "NUMBER", "IPV4_ADDRESS", "IPV6_ADDRESS", 
                  "IPV6_SHORTHAND", "IPV4_NETWORK", "IPV6_NETWORK", "BOOLEAN", 
                  "HEX_QUAD", "HEX_DIGIT", "COMMENT", "WS", "CONTINUED_LINE", 
                  "NEWLINE", "ID" ]

    grammarFileName = "Routeros.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


